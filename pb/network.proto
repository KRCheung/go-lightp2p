syntax = "proto2";

package pb;

// FetchData request fetch file or invoke restful or model
message FetchData {
    required string appKey = 1;
    required bytes args = 2;
    required string function = 3;
    required uint32 nRet = 4;
}

// FetchDataACK is FetchData ACK
message FetchDataACK {
    required string did = 1;
    optional bytes data = 2;
    optional uint64 length = 3;
    optional string error = 4;
}

// Message defines all protobuf message struct
// Type is message type
// Body is message content, maybe is marshaled by protobuf
// Signature is message signature, this is optional field
message Message {
    enum Type {
        FETCH_DATA = 1;
        FETCH_DATA_REQ = 2;
        FETCH_DATA_ACK = 3;

        REQUEST_CHECK_MODEL = 4;
        REQUEST_CHECK_MODEL_ACK = 5;

        CHECK_MODEL = 6;
        CHECK_MODEL_ACK = 7;

        REQUEST_RUN_MODEL = 8;
        REQUEST_RUN_MODEL_ACK = 9;

        RESPONSE_RUN_MODEL = 10;
        RESPONSE_RUN_MODEL_ACK = 11;

        QUERY_RES_REQ = 12;
        QUERY_RES_ACK = 13;

        CANCEL_TASK = 14;
        CANCEL_TASK_ACK = 15;

        REQUEST_CALL = 16;
        REQUEST_CALL_ACK = 17;

        RESPONSE_CALL = 18;
        RESPONSE_CALL_ACK = 19;

        NETWORK_HANDSHAKE_PING = 20;
        NETWORK_HANDSHAKE_PONG = 21;

        FETCH_CLUSTER_NODES = 22;
        FETCH_CLUSTER_NODES_RES = 23;
        // cert verify message type
        CERT_VERIFY = 24;

        CLUSTER_FILES_ADD = 25;
        CLUSTER_FILES_ADD_ACK = 26;
        CLUSTER_FILES_TAKE = 27;
        CLUSTER_FILES_TAKE_ACK = 28;
        CLUSTER_FILES_DELETE = 29;
        CLUSTER_FILES_DELETE_ACK = 30;

        //Federated Computation
        FederatedComputation_Request = 31;
        FederatedComputation_Response = 32;
        FederatedComputation_Intermediate_Message = 33;
    }
    required Type type = 1;
    required bytes body = 2;
    optional bytes signature = 3;
}

// RemoteRequest is remote query request
message RemoteRequest {
    required string appKey = 1;
}

// RemoteResponse is remote query response
message RemoteResponse {
    optional bytes res = 2;
    optional string error = 3;
}

// RequestCheckModel request check model
message RequestCheckModel {
    required string taskHash = 1;
    required string name = 2;
    required int64 time = 3;
    required string description = 4;
    required string creator = 5;
    required bytes model = 6;
    required bytes modelName = 7;
    required string appKey = 8;
}

// RequestCheckModelACK is ACK of RequestCheckModel
message RequestCheckModelACK {
    required uint32 code = 1;
    optional string err = 2;
}

// CheckModel is check model result
message CheckModel {
    required string taskHash = 1;
    required string modelHash = 2;
    required uint32 code = 3;
    optional string msg = 4; //if check failed, response reason
    optional string err = 5;
}

// CheckModelACK is ACK of CheckModel
message CheckModelACK {
    required uint32 code = 1;
    optional string err = 2;
}

// CancelTask means canceling the task
message CancelTask {
    required string taskHash = 1;
    required string appKey = 2;
    optional string modelHash = 3;
}

// CancelTaskACK is ACK of CancelTask
message CancelTaskACK {
    required uint32 code = 1;
    optional string err = 2;
}

// RequestRunModel request run data source model
message RequestRunModel {
    required string taskHash = 1;
    required string modelHash = 2;
    required bytes args = 3;
}

// RequestRunModelACK is ACK of RequestRunModel
message RequestRunModelACK {
    required uint32 code = 1;
    optional string err = 2;
}

// ResponseRunModel is response of run data source model result
message ResponseRunModel {
    required string taskHash = 1;
    required string modelHash = 2;
    required uint32 code = 3;
    optional bytes res = 4;
    optional string err = 5;
}

// ResponseRunModelACK is ACK of ResponseRunModel
message ResponseRunModelACK {
    required uint32 code = 1;
    optional string err = 2;
}

// RequestCall request run model and restful
message RequestCall {
    required string taskHash = 1;
    required string appKey = 2;
    required string method = 3;
    required bytes args = 4;
}

// RequestCallACK is ACK of RequestCall
message RequestCallACK {
    required uint32 code = 1;
    optional string err = 2;
}

// ResponseCall is response of run model and restful
message ResponseCall {
    required string taskHash = 1;
    required string appKey = 2;
    required uint32 code = 3;
    optional bytes res = 4;
    optional string err = 5;
}

// ResponseCallACK is ACK of ResponseCall
message ResponseCallACK {
    required uint32 code = 1;
    optional string err = 2;
}

// BXMNode is bitxmesh node info
message BXMNode {
    required string id = 1;
    repeated string addrs = 2;
}

// BXMNodes hold group id and BXMNode array
message BXMNodes {
    required string gid = 1;
    repeated BXMNode nodes = 2;
}

// NodeGroupInfo is node group information
message NodeGroupInfo {
    required string id = 1;
}

// ResQuery is query of resource.
message ResQuery {
    required string version = 1;
    required string bmID = 2;
}

// ResQuery is ack of resource query.
message ResQueryACK {
    required string version = 1;
    required string bmID = 2;
    required uint64 diskTotalSize = 3;
    required uint64 diskRestSize = 4;
    required uint32 cpuNum = 5;
    required uint64 memory = 6;
    optional string error = 7;
}

// ClusterFilesAdd is adding file to cluster.
message ClusterFilesAdd {
    required string version = 1;
    required string did = 2;
    required bytes data = 3;
    optional string error = 4;
}

// ClusterFilesAddACK is ack of adding file to cluster.
message ClusterFilesAddACK {
    required string version = 1;
    optional string error = 2;
}

// ClusterFilesTake takes file
message ClusterFilesTake {
    required string version = 1;
    required string did = 2;
}

// ClusterFilesTakeACK is ClusterFilesTake ACK
message ClusterFilesTakeACK {
    required string version = 1;
    required string did = 2;
    required bytes data = 3;
    optional string error = 4;
}

// ClusterFilesDelete deletes file
message ClusterFilesDelete {
    required string version = 1;
    required string did = 2;
}

// ClusterFilesDeleteACK is ClusterFilesDelete ACK
message ClusterFilesDeleteACK {
    required string version = 1;
    required string did = 2;
    optional string error = 3;
}

// FCRequest is request of federated computation
message FCRequest {
    enum FCType {
        NORMAL_INVOKE = 1;
        PSA_INVOKE = 2;
        PSI_INVOKE = 3;
    }

    required string FCID = 1; // federated computation id
    required string taskID = 2;
    required string caller = 3;
    required uint32 vmType = 4; // 0:lua 1:tee
    required FCExecuteContent executeContent = 5;
    required FCType type = 6; // federated computation type
    optional bytes external = 7; // federated computation request external
}

message PSAInvokeExternal {
    enum PSAType {
        ADD = 1; // addition
        SUB = 2; // subtraction
    }

    map<uint32, string> ParticipantList = 1;
    required PSAType type = 2;
}

message PSIInvokeExternal {
    required uint32 SetSize = 1;
    required bytes N = 2;
}

// FCExecuteContent is federated computation execute content
message FCExecuteContent {
    required string modelID = 1;
    required string appKey = 2;
    required string method = 3;
    required bytes args = 4;
}

// FCResponse is response of federated computation
message FCResponse {
    required string FCID = 1;
    required uint32 code = 2;
    optional bytes res = 3;
    optional string err = 4;
}

// FCIntermediateMessage is federated computation intermediate message
message FCIntermediateMessage {
    enum Type {
        KEY_REQUEST = 1;
        KEY_RESPONSE = 2;
        KEY_UPDATE = 3;
        KEY_UPDATE_ACK = 4;
        KEY_UPDATE_FINISH = 5;

        PSI_INIT_FINISH = 6;
        PSI_INIT_FINISH_ACK = 7;
        PSI_MASK_REQUEST = 8;
        PSI_MASK_RESPONSE_INIT = 9;
        PSI_MASK_RESPONSE_INIT_ACK = 10;
        PSI_MASK_RESPONSE = 11;
    }

    required string FCID = 1;
    required Type type = 2;
    required bytes body = 3;
}

message PSIMaskRequestBody {
    required uint32 StartNumber = 1;
    repeated bytes SubSet = 2;
}

message PSIMaskResponseInitBody {
    required uint32 RoundNumber = 1;
    required uint32 TableSize = 2;
}

message PSIMaskResponseBody {
    repeated PSIBucket Buckets = 1;
}

message PSIBucket {
    required uint32 Number = 1;
    repeated PSISetData Set = 2;
}

message PSISetData {
    required uint32 Index = 1;
    required bytes Data = 2;
}